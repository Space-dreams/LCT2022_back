# Generated by Django 3.2.13 on 2022-11-01 18:25

from django.conf import settings
import django.contrib.postgres.indexes
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main_app.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('nick_name', models.CharField(blank=True, max_length=255)),
                ('full_name', models.CharField(blank=True, max_length=255)),
                ('first_name', models.CharField(blank=True, max_length=255)),
                ('last_name', models.CharField(blank=True, max_length=255)),
                ('dateofbirth', models.CharField(blank=True, max_length=10)),
                ('country', models.CharField(blank=True, max_length=64)),
                ('citizenship', models.CharField(blank=True, max_length=64)),
                ('agreement', models.BooleanField(default=False)),
                ('gender', models.CharField(blank=True, max_length=10)),
                ('education', models.CharField(blank=True, max_length=256, verbose_name='Образование')),
                ('employment', models.CharField(blank=True, max_length=256, verbose_name='Занятость')),
                ('experience', models.CharField(blank=True, max_length=256, verbose_name='Опыт')),
                ('achievements', models.CharField(blank=True, max_length=256, verbose_name='Достижения')),
                ('profession', models.CharField(blank=True, max_length=128, verbose_name='Направление')),
                ('stack', models.CharField(blank=True, max_length=128, verbose_name='Навыки')),
                ('role_in_command', models.CharField(blank=True, max_length=128)),
                ('command', models.CharField(blank=True, max_length=3, verbose_name='Наличие команды')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('role', models.CharField(choices=[('US', 'Пользователь'), ('MO', 'Администратор')], default='US', max_length=2)),
                ('status', models.CharField(blank=True, max_length=64, verbose_name='Готовность участия в проектах')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'профиль',
                'verbose_name_plural': 'профили пользователей',
            },
            managers=[
                ('objects', main_app.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, null=True, verbose_name='Профессия')),
            ],
        ),
        migrations.CreateModel(
            name='Public',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public', models.PositiveIntegerField(choices=[(1, 'Open'), (2, 'Close')], default=1, verbose_name='Доступность проекта')),
            ],
            options={
                'verbose_name': 'доступность проекта',
                'verbose_name_plural': 'доступность проекта',
            },
        ),
        migrations.CreateModel(
            name='Stack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Стек технологий')),
            ],
            options={
                'verbose_name': 'стек технологий',
                'verbose_name_plural': 'стек технологий',
            },
        ),
        migrations.CreateModel(
            name='TypeProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveIntegerField(choices=[(1, 'Commercial'), (2, 'Non commercial')], default=1, verbose_name='Тип проекта - коммерческий/некоммерческий')),
            ],
            options={
                'verbose_name': 'тип проекта',
                'verbose_name_plural': 'типы проектов',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название проекта')),
                ('members_limit', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Максимальное количество участников')),
                ('description', models.TextField(default='Описание проекта', verbose_name='Описание проекта')),
                ('deadline', models.DateField(blank=True, null=True, verbose_name='Срок окончания проекта')),
                ('rating', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Рейтинг')),
                ('colour', models.CharField(default='green', max_length=20)),
                ('id_project_type', models.ForeignKey(default=2, on_delete=django.db.models.deletion.DO_NOTHING, to='main_app.typeproject', verbose_name='Тип проекта')),
                ('id_type', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to='main_app.public', verbose_name='Доступность проекта')),
                ('profile', models.ManyToManyField(blank=True, related_name='profile_project', to=settings.AUTH_USER_MODEL, verbose_name='Список участников')),
            ],
            options={
                'verbose_name': 'проект',
                'verbose_name_plural': 'проекты',
            },
        ),
        migrations.CreateModel(
            name='Idea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, null=True)),
                ('description', models.TextField(null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('stack', models.ManyToManyField(to='main_app.Stack')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_create', models.DateTimeField(auto_now_add=True)),
                ('text', models.TextField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('idea', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main_app.idea')),
            ],
        ),
        migrations.AddIndex(
            model_name='project',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='main_app_pr_name_6d2053_gin'),
        ),
    ]
